generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("POSTGRES_PRISMA_URL")
  relationMode = "prisma"
}

model User {
  id                      String           @id @default(uuid())
  firstName               String
  lastName                String
  email                   String           @unique
  phone                   String?          @unique
  imageUrl                String?          @db.Text
  bio                     String?          @db.Text
  lastSeen                DateTime         @default(now())
  contacts                Contact[]        @relation("UserToContacts")
  contactOf               Contact[]        @relation("ContactsOf")
  messages                Message[]
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  chats                   ChatMember[]
  ReadReceipt             ReadReceipt[]
  sentContactRequests     ContactRequest[] @relation("SentContactRequests")
  receivedContactRequests ContactRequest[] @relation("ReceivedContactRequests")
}

model Contact {
  id        String   @id @default(uuid())
  ownerId   String
  owner     User     @relation("UserToContacts", fields: [ownerId], references: [id], onDelete: Cascade)
  contactId String
  contact   User     @relation("ContactsOf", fields: [contactId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ownerId, contactId])
  @@index([contactId])
  @@index([ownerId])
}

model Chat {
  id            String       @id @default(uuid())
  isGroup       Boolean      @default(false)
  users         ChatMember[]
  messages      Message[]
  lastMessageAt DateTime     @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group?
}

model ChatMember {
  id      String  @id @default(uuid())
  chatId  String
  chat    Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  isAdmin Boolean @default(false)

  @@unique([chatId, userId])
  @@index([userId])
  @@index([chatId])
}

model Message {
  id        String        @id @default(uuid())
  content   String?       @db.Text
  fileUrl   String?       @db.Text
  senderId  String
  sender    User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  chatId    String
  chat      Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  deleted   Boolean       @default(false)
  readBy    ReadReceipt[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([chatId])
  @@index([senderId])
}

model ReadReceipt {
  id        String   @id @default(uuid())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  readAt    DateTime @default(now())

  @@unique([messageId, userId])
  @@index([userId])
}

model Group {
  id        String   @id @default(uuid())
  name      String
  imageUrl  String?  @db.Text
  chatId    String   @unique
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chatId])
}

model ContactRequest {
  id          String               @id @default(uuid())
  senderId    String
  sender      User                 @relation("SentContactRequests", fields: [senderId], references: [id], onDelete: Cascade)
  recipientId String
  recipient   User                 @relation("ReceivedContactRequests", fields: [recipientId], references: [id], onDelete: Cascade)
  status      ContactRequestStatus @default(PENDING)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@unique([senderId, recipientId])
  @@index([recipientId])
  @@index([senderId])
}

enum ContactRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
